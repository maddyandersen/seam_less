DEVLOG (Team Seam_less)

Instructions:
Devlog allows any group member at any time to see the current state of the project.
PM will make sure devlog is being maintained, but will not make all entries.
The devlog should be a plain text file, stored in the specified location.
When any team member stops working and pushes changes to github, they should update the devlog explaining what changes have been made. Include errors/bugs discovered (or created).
Separate devlog entries with a newline.
Most recent entry at the bottom.
Each entry should begin with the following format: firstL -- TIMESTAMP\n ( e.g.: topherM -- 1999-12-31 23:59 )

> maddyA -- 2021-01-17 18:05
- Installed apache on all members' droplets. We used this article (up to step 4):
  https://www.digitalocean.com/community/tutorials/how-to-install-the-apache-web-server-on-ubuntu-20-04
  We also followed steps 3+4 on this tutorial to give our user admin (sudo) privileges
  and install a firewall: https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04
- We also decided to use Team lach_on's p0 and bootstrap (as opposed to foundation)

> maddyA -- 2021-01-20 16:10
- Deployed myfoistapp on Erin and Maddy's droplets. As per Karl's suggestion, we added
  sys.path.append("/var/www/FlaskApp/FlaskApp/") to our .wsgi file. We also had to
  run sudo apt-get install libapache2-mod-wsgi-py3. Otherwise, we followed this tutorial:
  https://www.digitalocean.com/community/tutorials/how-to-deploy-a-flask-application-on-an-ubuntu-vps
- To restart the server, use sudo service apache2 restart
- Erin and I both got permission errors when trying to nano our error.log files.
  We are able to view them when we cat them (cat /var/log/apache2/error.log).
- Though we are getting a few errors with session, we hosted p0 on Erin's droplet.
  The app runs well locally, and we are only getting the errors when accessing the
  version hosted on the droplet.
- Erin played around with permissions, and we discovered www-data (which we later
  learned is the apache user). We used sudo chown www-data ., but we probably should
  have been more selective with our permissions. Something to update on Erin's and to
  keep in mind while working on mine, Amelia's, and Stella's.
- Whenever we reference the blog file in either our __init__.py or our db_builder.py
  (db = sqlite3.connect("blog"), etc.), we have to include blog's location within
  the file structure (/var/www/myapp/myapp/blog)
- Erin's droplet's IP address (for future reference) is 165.22.181.241

> maddyA -- 2021-01-23 23:37
- I learned that instead of manually copying and pasting every single file from our
  p0 into the file system on our droplets, we can use git clone [https of p0 repo].
  I tried this out, and it works really well!

> maddyA -- 2021-01-25 22:42
- Today was the day we'd all been waiting for: the day we worked with bootstrap!
- Erin was able to solve our session errors by adding the last line here:
  @app.route(("/show_existing_blog"), methods=["POST", "GET"])
    def show_existing_blog():
      if session["visitor_id"] != session["user_id"]:
        access = False
      else:
        access = True
      if "id" in request.form:
        blog_id=request.form["id"]
        session["blog_id"] = blog_id
- I demo-ed Team lach_on's p0 so Amelia and Stella could become more familiar with
  it, and then Amelia drove. We looked through the bootstrap website and started
  working on the login page (adding bootstrap to the form and the buttons). We also
  started a style.css sheet for additional css. We played around with the font, the
  background color, and the color of the buttons. We also added a footer with our
  team name and roster to every page (instead of having it at the top of the login
  page only), and also added a container to every page to help make our site more
  visually appealing.
- After working on the login page, we split up and each tackled 2-3 html files.
    Erin: profile, blog, masterlist
    Maddy: register, error
    Stella: create blog, edit blog
    Amelia: create entry, edit entry
  Splitting up the files was super productive, and we were able to finish them all
  up in a little under an hour.
- Team lach_on had both inline and internal css for their tables in the blog, profile,
  and masterlist files, but we moved this to our external style sheet.
- We are having trouble downloading files from Rocket.Chat. There is a ton of excess
  code in both the head and the body, but all of our intended code remains intact.
  Rocket.Chat may be adding in these extra lines, but we aren't sure why. Might be
  worth mentioning this in class tomorrow.
- Next up:
    - host version of p0 with css
    - make sure all devos are able to host p0 on their droplets

> stellaO -- 2021-01-26 21:20
- Updated README file to account for project description and launching code

> ameliaC -- 2021-01-26 21:36
- Working off of Lach On's design.pdf, separated their P0 content from SeamLess's new P1 content
- Added task breakdown for adding CSS and Bootstrap to the HTML templates 
  (see maddyA's 2021-01-25 22:42 entry for who did what)
- Added a new section outlining the CSS and Bootstrap elements we included
    - fonts:
        - body: Lato
        - h1: Lobster Two, bold
    - colors:
        - background, footer text: #BCD6B4 (light green)
        - footer background, main text: #005C59 (teal)
        - buttons: #005C59 (teal), #67839E (greyish blue), #9E0E1D (fire engine red)
        - button text: #FFFFFF (white)
    - Bootstrap:
        - forms with floating labels
        - mb-3 class instead of breaks
        - btn class for all our buttons
        - tables with striped and hoverable rows
        - container class around all content except footers
    - external CSS stylesheet:
        - footer class styles footer containing our team name and roster
        - input class gives all forms width of 50%
        - table class gives all tables width of 100%
        - top-btn, btn, red classes color different buttons
        - btn-set class aligns buttons next to each other

> erinL -- 2021-01-26 21:51
- Git cloned the seam_less repo on the droplet and made necessary configuration changes.
The droplet successfully loaded our css-ified app, but we ran into many issues with our cookies for some reason.
the error: [Wed Jan 27 02:43:25.237920 2021] [wsgi:error] [pid 1130119:tid 140596853319424]
[client 66.65.163.58:55536] KeyError: 'entry_id', referer: http://165.22.181.241/edit_entry
- we also saw this break for blog_id, user_id, visitor_id, etc. but was very sporadic in terms
of when it would break. Sometimes editing a blog would work and then other times it would not.
It usually didn't work when we tried to edit or create an entry, and sometimes when we tried to create a blog.
- we tried to tweak things here and there and make minor changes to see if they would do anything,
but we haven't been able to solve this bug, though everything works perfectly locally.

> maddyA -- 2021-01-27 00:48
- I was able to host p0 on my droplet (157.230.230.75) without any of the same
  session errors we've been getting on Erin's. I used this article:
  https://www.digitalocean.com/community/questions/permissions-on-var-www-html-for-uploading-web-site-files-via-sftp
  
  1. Make sure you have Flask, a virtual environment, and pip3 installed. 
     Instructions can be found in the article above.
  2. After logging in to your user, cd /var/www/
  3. sudo a2enmod wsgi
  4. sudo git clone https://github.com/maddyandersen/seam_less.git
  5. cd /etc/apache2/sites-available/
  6. sudo nano /etc/apache2/sites-available/seam_less.conf
     Inside the file, write:
        <VirtualHost *:80>
		        ServerName 157.230.230.75
		        ServerAdmin maddy@157.230.230.75
		        WSGIScriptAlias / /var/www/seam_less/seam_less.wsgi
		        <Directory /var/www/seam_less/seam_less/>
			        Order allow,deny
			        Allow from all
		        </Directory>
		        Alias /static /var/www/seam_less/seam_less/static
		        <Directory /var/www/seam_less/seam_less/static/>
			        Order allow,deny
			        Allow from all
		        </Directory>
		        ErrorLog ${APACHE_LOG_DIR}/error.log
		        LogLevel warn
		        CustomLog ${APACHE_LOG_DIR}/access.log combined
        </VirtualHost>
     Save and exit.
  7. sudo a2ensite seam_less
  8. systemctl reload apache2 
  9. We ran sudo a2ensite seam_less again to be sure our site was enabled
  10. cd /var/www/seam_less
  11. sudo nano seam_less.wsgi
      Inside the file, write:
        #!/usr/bin/python3
        import sys
        import logging
        logging.basicConfig(stream=sys.stderr)
        sys.path.insert(0,"/var/www/seam_less/")
        sys.path.append("/var/www/seam_less/seam_less/")

        from seam_less import app as application
        application.secret_key = 'Add your secret key'
      Save and exit. 
  12. sudo apt-get install libapache2-mod-wsgi-py3
  13. sudo service apache2 restart
  14. cd seam_less/
  15. Change the directory owner and group:
      sudo chown -R www-data:www-data /var/www/seam_less/seam_less
  16. Allow the group to write to the directory with appropriate permissions:
      sudo chmod -R 775 /var/www/seam_less/seam_less
  17. Add user to the www-data group:
      sudo usermod -a -G www-data maddy
  18. logout (exit) and login again
  19. Check by running ls -al blog within /var/www/seam_less/seam_less. This is what I have:
      -rwxrwxr-x 1 www-data www-data 24576 Jan 27 04:57 blog
  20. Restart apache (sudo service apache2 restart)

> ameliaC -- 2021-01-27 21:04
- We worked together on hosting p0 on my droplet (165.22.189.233) based on what Maddy did last 
  night. My earlier try was unsuccessful, so I deleted the files and restarted from the beginning.
- I added the specific commands that I used to Maddy's tutorial in the last entry to make it 
  more specific and easier to recreate. Steps 1-11 are basically the same as the steps in the 
  article, but I thought it would be helpful to document commands specific to our project that 
  we tested and proved to work. (Also, maybe I should have started at step 0, but I realized 
  that after I typed all those numbers out and I don't want to do it again.)
